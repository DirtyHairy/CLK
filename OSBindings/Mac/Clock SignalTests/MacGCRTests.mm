//
//  MacGCRTests.mm
//  Clock SignalTests
//
//  Created by Thomas Harte on 15/06/2019.
//  Copyright Â© 2019 Thomas Harte. All rights reserved.
//

#import <XCTest/XCTest.h>

#include "../../../Storage/Disk/Encodings/AppleGCR/Encoder.hpp"

@interface MacGCRTests : XCTestCase
@end

@implementation MacGCRTests {
}

- (void)testSector0Track0Side0Header {
	const auto header = Storage::Encodings::AppleGCR::Macintosh::header(0x22, 0, 0, false);
	const std::vector<uint8_t> expected_mark = {
		0xd5, 0xaa, 0x96,
		0x96, 0x96, 0x96, 0xd9, 0xd9,
		0xde, 0xaa, 0xeb
	};
	const auto mark_segment = Storage::Disk::PCMSegment(expected_mark);

	XCTAssertEqual(mark_segment.data, header.data);
}

- (void)testSector9Track11Side1Header {
	const auto header = Storage::Encodings::AppleGCR::Macintosh::header(0x22, 11, 9, true);
	const std::vector<uint8_t> expected_mark = {
		0xd5, 0xaa, 0x96,
		0xad, 0xab, 0xd6, 0xd9, 0x96,
		0xde, 0xaa, 0xeb
	};
	const auto mark_segment = Storage::Disk::PCMSegment(expected_mark);

	XCTAssertEqual(mark_segment.data, header.data);
}

- (void)testData {
	// These bytes are taken from the PlusToo project's boot disk, courtesy of https://www.bigmessowires.com ;
	// this is the only example I've been able to find of a Macintosh disk that has already been converted
	// into GCR bytes.
	const std::vector<uint8_t> expected_data = {
		0xD5, 0xAA, 0xAD, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
		0x96, 0x96, 0x96, 0x96, 0xB4, 0xAE, 0xA6, 0xE7, 0xF6, 0x96, 0xAE, 0xAF, 0xDC, 0xAE, 0xCB, 0xD9,
		0x9D, 0xBE, 0xAD, 0xFB, 0xE6, 0xD7, 0xF4, 0xEC, 0xF4, 0xFD, 0x9F, 0xE5, 0xBA, 0xB7, 0xE9, 0xAB,
		0x9F, 0xA6, 0xAF, 0xE5, 0xE6, 0xEB, 0xEA, 0xEC, 0xBE, 0xEC, 0xFD, 0xFC, 0xB9, 0xBA, 0xCD, 0xAC,
		0xBB, 0xDE, 0xFA, 0xF7, 0xF5, 0xEB, 0xBF, 0xBD, 0xFB, 0xFD, 0xFB, 0xF7, 0xFD, 0xFC, 0xEB, 0x9D,
		0xF6, 0xBE, 0xF4, 0xFB, 0xB4, 0xAF, 0xCD, 0xD6, 0xDF, 0xB6, 0xFB, 0x96, 0xE5, 0x9E, 0xCD, 0xD6,
		0xE9, 0xE7, 0xB5, 0xA7, 0xEF, 0xF5, 0xF3, 0xD7, 0xCE, 0xF2, 0xAB, 0xBB, 0xDE, 0xD7, 0x9E, 0xFA,
		0xAE, 0xBA, 0xFE, 0xDF, 0xA7, 0x9B, 0xAF, 0xDC, 0xA6, 0xF2, 0xF3, 0xFC, 0xEE, 0xEE, 0xA6, 0x9D,
		0xF7, 0x9B, 0xF6, 0xA6, 0xB6, 0xCF, 0xF2, 0xEC, 0xD3, 0xAF, 0xDC, 0xAC, 0xE5, 0x96, 0xAF, 0xBE,
		0xDE, 0xB3, 0xCF, 0xED, 0xFA, 0xFE, 0xAE, 0xBA, 0xD3, 0xF9, 0xEA, 0xF4, 0xFF, 0xB6, 0xAF, 0xBA,
		0x97, 0x9D, 0x9B, 0xA6, 0xD6, 0xFC, 0xB4, 0xCE, 0xFA, 0xD9, 0xF3, 0xFD, 0xD7, 0xEE, 0xE6, 0xD7,
		0xEC, 0xB3, 0xFC, 0x9F, 0xB3, 0xB3, 0xBF, 0xAC, 0xF2, 0xCF, 0x9D, 0xD3, 0xEF, 0xB5, 0x9E, 0xA7,
		0x9B, 0xDF, 0x9E, 0xAD, 0xFB, 0xB4, 0x9E, 0xAD, 0xE7, 0xD9, 0xA6, 0xAD, 0xBD, 0xDA, 0xB6, 0x9A,
		0xE9, 0xB2, 0xFA, 0xAC, 0xEB, 0x9B, 0xFE, 0xAE, 0xAD, 0xCB, 0xE6, 0xBB, 0xEF, 0xDB, 0xF5, 0xE7,
		0x9B, 0xF3, 0xED, 0xFD, 0xCF, 0xD9, 0x96, 0xEC, 0xD3, 0xF7, 0xE6, 0xEB, 0xB6, 0xF5, 0xBF, 0xB9,
		0xAD, 0xB4, 0xDB, 0xCF, 0xDD, 0xE6, 0xB9, 0xF6, 0xCE, 0xEA, 0xAD, 0x9A, 0xDC, 0xF3, 0x9B, 0xB4,
		0xAC, 0xDA, 0xFD, 0xAC, 0xD6, 0xBB, 0xF5, 0xF2, 0xDD, 0x9D, 0xDA, 0xF3, 0xEB, 0xED, 0xB6, 0xDA,
		0xDC, 0xFF, 0xE9, 0xF7, 0xCE, 0xB9, 0xCB, 0xBD, 0xF6, 0xF3, 0xBA, 0xCE, 0xB6, 0xDF, 0xD9, 0xFC,
		0xED, 0x96, 0x9D, 0xE5, 0xFF, 0xDC, 0xBB, 0xD9, 0xB3, 0xE7, 0xAB, 0xE6, 0xED, 0xB7, 0x96, 0xFD,
		0xF4, 0xD3, 0xB2, 0xF5, 0xDF, 0xE7, 0xD9, 0x9D, 0xCE, 0xB5, 0xD9, 0xD3, 0xF5, 0xCD, 0xB3, 0xD6,
		0xD6, 0xAC, 0xB6, 0xAB, 0xF4, 0xDD, 0xAD, 0xE6, 0xB7, 0xEB, 0xFD, 0xAF, 0xFE, 0xFE, 0xBE, 0xDF,
		0xFE, 0x97, 0x97, 0xF9, 0xB9, 0xA7, 0xBB, 0x9A, 0xB3, 0xCF, 0xB9, 0xB7, 0x9E, 0xF7, 0xF9, 0xB5,
		0x96, 0xBF, 0xBE, 0xFF, 0xD3, 0x97, 0xBE, 0xBF, 0xF7, 0xF9, 0xDB, 0xB3, 0xD3, 0xBB, 0xAC, 0xB2,
		0xA7, 0xDC, 0xDE, 0xAE, 0xDD, 0x9E, 0xD9, 0xAC, 0xAB, 0xB5, 0xB7, 0xDD, 0xFE, 0xEC, 0x96, 0xDA,
		0xEE, 0xFD, 0xFF, 0xDA, 0xAD, 0xEA, 0xB4, 0xE6, 0xEF, 0xAC, 0x96, 0xEE, 0xF7, 0xFD, 0xFD, 0xFB,
		0xF3, 0xEF, 0xFF, 0x9D, 0xF7, 0xA7, 0xBE, 0x9E, 0xBE, 0xBE, 0xBD, 0xFB, 0xFE, 0xBE, 0x9E, 0xEB,
		0xEA, 0xBB, 0xA6, 0xEC, 0xE6, 0xD6, 0xDC, 0xB9, 0xAB, 0xAE, 0xEC, 0xAE, 0xE5, 0xB5, 0xFC, 0xCF,
		0xE9, 0x9A, 0x9F, 0xFA, 0xAE, 0xF9, 0xDE, 0xF9, 0xF5, 0x9F, 0xBB, 0x9E, 0xBC, 0xD3, 0xBF, 0xB3,
		0xEF, 0xAF, 0xE5, 0xDE, 0xDB, 0xFA, 0xF3, 0xF6, 0xAE, 0xE7, 0xAC, 0xDE, 0xAD, 0xEA, 0x97, 0xAD,
		0xF9, 0xF4, 0xBD, 0xCF, 0xAC, 0xDE, 0xDA, 0xAE, 0xB7, 0xBE, 0xF3, 0xEC, 0xEE, 0xEE, 0xAB, 0xCE,
		0xE9, 0xEC, 0xEA, 0xA7, 0xE7, 0xFC, 0xDB, 0xCE, 0xAD, 0xB3, 0xAD, 0xB3, 0x96, 0xF6, 0xB4, 0xAC,
		0xAF, 0xAE, 0xEA, 0x97, 0x9D, 0xE6, 0xED, 0xAC, 0xBE, 0xBE, 0xD3, 0xDC, 0xBF, 0x9D, 0xAB, 0xD6,
		0xEF, 0xFE, 0x97, 0xF4, 0xE7, 0xDF, 0xEB, 0xB9, 0xF7, 0xCD, 0xD6, 0x97, 0xF5, 0x9B, 0xFC, 0xED,
		0xAE, 0xB2, 0xEE, 0xAD, 0xBB, 0xD9, 0xDB, 0xAC, 0xDC, 0xEC, 0xAB, 0xAE, 0xEE, 0xAB, 0xF7, 0xFB,
		0xD7, 0xCD, 0x9B, 0xFF, 0xAB, 0xE7, 0xAC, 0xF6, 0xFE, 0xD6, 0xF3, 0xEF, 0xA6, 0x9E, 0xDD, 0xAB,
		0xBB, 0xAC, 0xD6, 0xD3, 0xF6, 0xDE, 0x96, 0xA7, 0xAC, 0xF2, 0xBE, 0xD3, 0xBE, 0xF6, 0xEC, 0xEA,
		0xFD, 0x9D, 0xD7, 0xDA, 0xAE, 0x9F, 0xDF, 0xDD, 0xCF, 0xAE, 0xB7, 0xE6, 0xEB, 0xDE, 0xBB, 0xB3,
		0xBE, 0xCF, 0x96, 0xBC, 0xFE, 0xF3, 0xF4, 0xEA, 0xFD, 0xA6, 0xF3, 0xBA, 0xDC, 0xEF, 0x9E, 0xB6,
		0xF5, 0xFF, 0xE9, 0x9A, 0xBE, 0xEF, 0xAF, 0x96, 0xDA, 0x9D, 0xB9, 0xD7, 0xD3, 0xED, 0xB9, 0xDB,
		0xF6, 0xB9, 0xE9, 0xCE, 0xDD, 0xDC, 0xBB, 0xCD, 0xFC, 0xCD, 0xCB, 0xBF, 0xAE, 0x9E, 0xEC, 0xF3,
		0xE7, 0xED, 0xEE, 0xE5, 0xF7, 0xCF, 0xAC, 0x97, 0xAE, 0xDA, 0xCB, 0x96, 0xEB, 0xBC, 0xAD, 0xBB,
		0xBD, 0xA7, 0xBB, 0xCD, 0xE6, 0xEA, 0xAF, 0xAD, 0xCD, 0x9E, 0xAD, 0xFD, 0xF3, 0xAC, 0xFB, 0xB9,
		0xF2, 0xAD, 0xFF, 0xED, 0xDF, 0xDC, 0x9F, 0xB6, 0xB6, 0xEE, 0xD9, 0xD3, 0xF5, 0xCE, 0xBD, 0xCE,
		0xDF, 0xFC, 0xEA, 0xB2, 0xD6, 0xB5, 0xF4, 0xED, 0xE9, 0x9F, 0xFD, 0xD7, 0xAE, 0xD9, 0xEC, 0xEE,
		0xEC, 0xAB, 0x9B, 0xDE, 0xAA, 0xEB
	};
	// This appears to be what the Macintosh places into memory when reading the above sector.
	const uint8_t source_data[524] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1c, 0x1b, 0x81,
		0x11, 0xe1, 0x0b, 0x50, 0x26, 0x2c, 0xd1, 0xc5, 0x36, 0x5f, 0x58, 0xdd, 0x26, 0x12, 0x61, 0xaf,
		0xe8, 0xbd, 0x7d, 0x4c, 0xba, 0x1a, 0x71, 0x9a, 0xa0, 0x40, 0x52, 0x74, 0x2d, 0x7f, 0x86, 0x02,
		0x20, 0xef, 0xbd, 0x52, 0x29, 0xeb, 0xd5, 0xd5, 0x88, 0x54, 0xe7, 0xb8, 0xe8, 0x2b, 0x65, 0x93,
		0x28, 0xd9, 0x01, 0x3e, 0x3c, 0x66, 0x8a, 0xbb, 0x39, 0x6d, 0x23, 0xc3, 0xad, 0x8c, 0xb2, 0x30,
		0x73, 0x5c, 0x38, 0x90, 0xca, 0xf4, 0x2e, 0x65, 0xaf, 0xa6, 0xe0, 0x4c, 0x18, 0x6c, 0x6a, 0xbd,
		0x30, 0x07, 0x62, 0x96, 0x3d, 0x2b, 0x41, 0xb1, 0x0d, 0x8b, 0x33, 0xed, 0x49, 0x38, 0xe0, 0x78,
		0x06, 0x9f, 0x72, 0xa0, 0xdf, 0x9b, 0xc9, 0x1f, 0xd5, 0x1f, 0xac, 0x39, 0x7f, 0x8f, 0x44, 0x13,
		0x64, 0xbb, 0x92, 0xdd, 0xec, 0xc5, 0xfd, 0xf0, 0xe5, 0xc9, 0x69, 0x34, 0x44, 0xbd, 0x0a, 0x89,
		0xb5, 0xc7, 0x91, 0x6b, 0x60, 0x73, 0x7f, 0xe1, 0x44, 0x75, 0xb6, 0xf6, 0x8e, 0xc5, 0xac, 0x91,
		0x0c, 0x34, 0xef, 0xa3, 0x74, 0xa1, 0xdc, 0x6f, 0xfb, 0x86, 0x66, 0x86, 0x13, 0xd3, 0x4b, 0xc1,
		0x61, 0x3f, 0x26, 0x05, 0x92, 0xe2, 0x90, 0xd6, 0xb2, 0x7d, 0x34, 0x20, 0x54, 0x80, 0xb7, 0xb3,
		0xdc, 0xe6, 0xc3, 0x67, 0xdc, 0xb2, 0x86, 0x2e, 0x92, 0x50, 0x90, 0xfc, 0x38, 0x7c, 0x97, 0x8f,
		0xc3, 0x45, 0x2e, 0x4d, 0xff, 0x06, 0x6b, 0x0c, 0xb9, 0xc1, 0x9c, 0xca, 0x04, 0x46, 0xa7, 0x44,
		0x93, 0xa2, 0xa5, 0xf7, 0x74, 0x85, 0x9c, 0x6f, 0x0c, 0x69, 0xc1, 0xc3, 0xc0, 0x50, 0x65, 0x66,
		0x99, 0xae, 0x68, 0xb9, 0x6f, 0x2f, 0x8c, 0xb3, 0x1f, 0x1b, 0xe8, 0x2f, 0x7f, 0x61, 0xd9, 0x06,
		0xee, 0xe9, 0xa2, 0xab, 0xd0, 0x31, 0xdf, 0x51, 0x58, 0xdf, 0x31, 0x09, 0x91, 0xdd, 0x81, 0x7f,
		0x32, 0xa9, 0xb6, 0x08, 0x73, 0x02, 0x93, 0xd8, 0x31, 0x70, 0x3c, 0xb3, 0x16, 0x82, 0x62, 0x06,
		0xf9, 0x75, 0xbf, 0xd6, 0xa4, 0x94, 0x0b, 0x07, 0x66, 0x46, 0x32, 0xb2, 0xf0, 0x38, 0x9f, 0xd7,
		0x1e, 0xfd, 0x69, 0x28, 0x08, 0x92, 0x92, 0xe7, 0xe4, 0xc8, 0xcc, 0x7f, 0xeb, 0x3b, 0xcd, 0xa5,
		0x86, 0xb8, 0xee, 0x2f, 0xc4, 0x49, 0x55, 0x4c, 0xba, 0xfb, 0x7a, 0xe8, 0xcf, 0x48, 0x32, 0x2e,
		0xf5, 0x8f, 0xa3, 0x27, 0x76, 0x04, 0x54, 0x1f, 0x2c, 0x2f, 0x14, 0xd9, 0xab, 0xaa, 0x0f, 0xf2,
		0x99, 0x72, 0x19, 0xa8, 0x27, 0xf3, 0xa2, 0xfc, 0x12, 0xdc, 0x49, 0x4c, 0x62, 0x84, 0x17, 0x32,
		0xd1, 0xde, 0x28, 0x87, 0xb0, 0x7e, 0xd9, 0x02, 0xce, 0xe8, 0x92, 0xad, 0x6d, 0x5e, 0x79, 0x9f,
		0xfc, 0x2c, 0xa5, 0x01, 0x1a, 0xc5, 0x4a, 0x93, 0x04, 0xcf, 0x6e, 0xd6, 0xa5, 0xa4, 0x68, 0x1d,
		0x8c, 0x91, 0xa4, 0x01, 0x21, 0x8c, 0xc9, 0x20, 0xd2, 0xc3, 0x6d, 0xed, 0x76, 0xea, 0x3a, 0x54,
		0xd4, 0xb5, 0x8d, 0x60, 0x7f, 0x61, 0xa1, 0x59, 0x53, 0xad, 0x59, 0xce, 0x6c, 0x67, 0x64, 0x86,
		0x4c, 0xea, 0x39, 0x6b, 0x14, 0x75, 0x7a, 0x75, 0xcd, 0x5c, 0xf1, 0x8d, 0xd9, 0x7d, 0x3e, 0x76,
		0x47, 0x66, 0x01, 0xf3, 0x40, 0x3d, 0x80, 0x29, 0xf1, 0x82, 0x85, 0xff, 0xab, 0xa0, 0x67, 0x26,
		0x8f, 0xb8, 0x9b, 0x5a, 0xb2, 0x64, 0x8d, 0xbe, 0xe3, 0xa4, 0x82, 0x44, 0xac, 0x1d, 0xae, 0x80,
		0x54, 0xac, 0x14, 0x0e, 0x63, 0x9a, 0x17, 0x4f, 0x1b, 0xf2, 0x02, 0x85, 0x34, 0x93, 0xab, 0x0e,
		0x09, 0x64, 0x18, 0x6e, 0x66, 0xd5, 0x32, 0x6f, 0xc2, 0x1e, 0x69, 0x75, 0x80, 0x4d, 0x9e, 0x92,
		0x5a, 0xee, 0xc1, 0x29, 0x41, 0xae, 0x47, 0xbd, 0x3b, 0x13, 0x46, 0xa1, // 0x00,
	};
	const auto data = Storage::Encodings::AppleGCR::Macintosh::data(source_data);
	const auto expected = Storage::Disk::PCMSegment(expected_data);
	XCTAssertEqual(data.data, expected.data);
}

@end
